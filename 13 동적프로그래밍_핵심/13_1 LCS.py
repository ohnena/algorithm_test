# 유형별문제풀이>13 동적프로그래밍-핵심
# //좀더 실전문제!


# 13.1 LCS (Longest Common Subsequence)
# 9251
# easy, 동적프로그래밍, LCS, 30분
# //최장 공통 부분수열
#
# 핵심아이디어
# - D[i][j] = X[0...i]와 Y[0...j]의 공통부분수열의 최대길이
#
# - 점화식은.
# D[i][j] =
# D[i-1][j-1] + 1 (if X[i] = Y[j])
# max(D[i][j-1], D[i-1][j] (if X[i] != Y[j])
#
# //테이블로 돌아가는 과정을 확인하니 점화식이 상당히 흥미롭다.
# //우하향의 대각선을 +1이 되는 부분이 신기하다.
# //특히 테이블에서 max(상,좌)로 계산하는 부분이 인상적이다. 정말 효율적인 Memorization의 극치가 아닐 수 없다.


# 1 인풋받기
X = str(input())
Y = str(input())
# X = "ACAYKP"
# Y = "CAPCAK"
#
# s1 = [0] + [1]


# 2 테이블 세팅
D = [[0] * (len(Y) + 1) for _ in range(len(X) + 1)]

# 3 점화식 구현
for i in range(1, len(X) + 1): #위와 결과는 동일...
    for j in range(1, len(Y) + 1):
        if X[i-1] == Y[j-1]:
            D[i][j] = D[i-1][j-1] + 1
        else:
            D[i][j] = max(D[i-1][j], D[i][j-1])


# 4 결과 출력후 종료
print(D[len(X)][len(Y)])   # D[-1][-1]은 제출시 런타임에러나더라...어쩐지 안쓰더라...



소회
:
도대체 어떻게 점화식을 찾아야하는 걸까?
이번 DP도 테이블을 이용했다. 작은것부터 시작해서 조금씩 키워나가는 형태가 DP의 전형인데,
