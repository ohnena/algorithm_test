#
# *다이나믹 프로그래밍은 기업테스트나 대회에서 단골문제다. (쉬운난이도부터 어려운난이도까지...)
# *근데 다이나믹 프로그래밍이 뭐더라...?
#
# *다이나믹프로그래밍의 포인트는 2가지다
# -1 작은문제들을 풀어나가면서, 그것들의 결과를 이용하여 큰문제를 푸는 방식이다. 그래서 대표적인 예가 피보나치수열이다
# -2 작은문제들의 결과를 따로저장해둬서 큰문제를 풀때 바로 가져다 쓸 수 있도록하는 이름하야 Memorization기법을 사용한다.
#
#
#
# *피보나치수열의 패턴상 재귀를 떠올리기 쉽지만, 사실 피보나치수열은 다이나믹프로그래밍의 대표적인 예다!
def fibo(num):
    if num <= 1:
        return num
    return fibo(num - 1) + fibo(num - 2)


def fibo_dp(num):
    cache = [0 for index in range(num + 1)]
    cache[0] = 0
    cache[1] = 1

    for index in range(2, num + 1):
        cache[index] = cache[index - 1] + cache[index - 2]
    return cache[num]
#
#
# *참고로 다이나믹알고리즘은 생김새상 분할정복알고리즘과 잘 된다.
# -다이나믹프로그래밍이 작은문제들을 푼결과를 조합하여 큰문제를 푸는 방식으로 진행해나가는데,
# -분할정복알고리즘은 큰문제를 쪼개고쪼개서 가장 작은 문제로 만든다음, 그것들을 다시 병합하며 큰문제를 푸는 방식이다
# -굳이 생김새를 비교하자면 전자는 애초에 작은거에서부터 시작해서 조합하고, 후자는 쪼개는걸로 시작하는데, 사실 작은문제의 결과를 조합해서 큰문제를 푸는건 같은데,
#  그렇다면 둘은 어디서 다른건가?
# -바로 Memorization의 유무의 차이다. 다이나믹프로그래밍은 상위문제를 풀때 이전의 하위문제들의 결과가 필요하기때문에 Memorization을 해야하는 반면,
#  분할정복알고리즘은 진행과정에서 부분문제들이 중복되지 않는다고 한다. 그래서 Memorization이 없다고
# -분할정복알고리즘의 대표적인 예가 Quick Sort, Merge Sort이다. 딱봐도 Memorization과는 거리가 멀지?
#
#
# *분할정복알고리즘은 퀵소트와 머지소트에서 다시 알아보는걸로...

# *추가
# -다이나믹알고리즘에서는 점화식이라는 것을 구해야 한다. 피보나치수열에서의 F(n)= F(n-2)+F(n-1)이라는 식이 바로 점화식이다.
#  이걸 구해야, Memorization도 할것 아니겠는가!